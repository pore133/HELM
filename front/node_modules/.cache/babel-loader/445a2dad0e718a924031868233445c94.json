{"ast":null,"code":"/**\r\n * DevExtreme (esm/events/click.js)\r\n * Version: 23.1.6\r\n * Build date: Fri Oct 13 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../core/renderer\";\nimport eventsEngine from \"../events/core/events_engine\";\nimport devices from \"../core/devices\";\nimport domAdapter from \"../core/dom_adapter\";\nimport { resetActiveElement } from \"../core/utils/dom\";\nimport { requestAnimationFrame, cancelAnimationFrame } from \"../animation/frame\";\nimport { addNamespace, fireEvent } from \"./utils/index\";\nimport { subscribeNodesDisposing, unsubscribeNodesDisposing } from \"./utils/event_nodes_disposing\";\nimport pointerEvents from \"./pointer\";\nimport Emitter from \"./core/emitter\";\nimport registerEmitter from \"./core/emitter_registrator\";\nvar CLICK_EVENT_NAME = \"dxclick\";\nvar misc = {\n  requestAnimationFrame: requestAnimationFrame,\n  cancelAnimationFrame: cancelAnimationFrame\n};\nvar prevented = null;\nvar lastFiredEvent = null;\n\nvar onNodeRemove = function onNodeRemove() {\n  lastFiredEvent = null;\n};\n\nvar clickHandler = function clickHandler(e) {\n  var originalEvent = e.originalEvent;\n  var eventAlreadyFired = lastFiredEvent === originalEvent || originalEvent && originalEvent.DXCLICK_FIRED;\n  var leftButton = !e.which || 1 === e.which;\n\n  if (leftButton && !prevented && !eventAlreadyFired) {\n    if (originalEvent) {\n      originalEvent.DXCLICK_FIRED = true;\n    }\n\n    unsubscribeNodesDisposing(lastFiredEvent, onNodeRemove);\n    lastFiredEvent = originalEvent;\n    subscribeNodesDisposing(lastFiredEvent, onNodeRemove);\n    fireEvent({\n      type: CLICK_EVENT_NAME,\n      originalEvent: e\n    });\n  }\n};\n\nvar ClickEmitter = Emitter.inherit({\n  ctor: function ctor(element) {\n    this.callBase(element);\n    eventsEngine.on(this.getElement(), \"click\", clickHandler);\n  },\n  start: function start(e) {\n    prevented = null;\n  },\n  cancel: function cancel() {\n    prevented = true;\n  },\n  dispose: function dispose() {\n    eventsEngine.off(this.getElement(), \"click\", clickHandler);\n  }\n});\n!function () {\n  var desktopDevice = devices.real().generic;\n\n  if (!desktopDevice) {\n    var startTarget = null;\n    var blurPrevented = false;\n    var document = domAdapter.getDocument();\n    eventsEngine.subscribeGlobal(document, addNamespace(pointerEvents.down, \"NATIVE_CLICK_FIXER\"), function (e) {\n      startTarget = e.target;\n      blurPrevented = e.isDefaultPrevented();\n    });\n    eventsEngine.subscribeGlobal(document, addNamespace(\"click\", \"NATIVE_CLICK_FIXER\"), function (e) {\n      var $target = $(e.target);\n\n      if (!blurPrevented && startTarget && !$target.is(startTarget) && !$(startTarget).is(\"label\") && (element = $target, $(element).is(\"input, textarea, select, button ,:focus, :focus *\"))) {\n        resetActiveElement();\n      }\n\n      var element;\n      startTarget = null;\n      blurPrevented = false;\n    });\n  }\n}();\nregisterEmitter({\n  emitter: ClickEmitter,\n  bubble: true,\n  events: [CLICK_EVENT_NAME]\n});\nexport { CLICK_EVENT_NAME as name };","map":null,"metadata":{},"sourceType":"module"}