{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\JUN-D\\\\Desktop\\\\\\uD5EC\\uC2A4\\uCF00\\uC5B4\\\\11_2\\\\HELF-master\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadLogin),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadLogout),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadLogout),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadSignUp),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadIdCheck),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadIdCheck),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(resetIdCheck),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchResetIdCheck),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(loadFindPw),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadFindPw),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(loadAdditionalUserInfo),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadAdditionalUserInfo),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(UserSaga);\n\nimport { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport { useHistory } from 'react-router-dom';\nimport { EmailCheckAPI, LoginAPI, KaKaoIdCheckAPI, IdCheckAPI, ResetPasswordAPI, SignUpAPI, AdditionalUserInfoAPI } from \"../apis/user\";\nimport { getUserInfoAPI } from \"../apis/kakaoUser\";\nimport { KAKAO_LOG_IN_REQUEST, KAKAO_LOG_IN_SUCCESS, KAKAO_LOG_IN_FAILURE, KAKAO_ID_CHECK_SUCCESS, KAKAO_ID_CHECK_REQUEST, KAKAO_SIGN_UP_REQUEST, KAKAO_SIGN_UP_SUCCESS, KAKAO_SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FIND_PW_REQUEST, FIND_PW_SUCCESS, FIND_PW_FAILURE, ID_CHECK_SUCCESS, ID_CHECK_REQUEST, ID_CHECK_RESET, EMAIL_CHECK_REQUEST, EMAIL_CHECK_FAILURE, EMAIL_CHECK_SUCCESS, USER_ADDITIONAL_INFO_REQUEST, USER_ADDITIONAL_INFO_SUCCESS, USER_ADDITIONAL_INFO_FAILURE } from \"../modules/user\";\nimport { MY_PAGE_REQUEST } from \"../modules/myPage\";\nimport { MY_DIET_DIARY_LIST_REQUEST } from \"../modules/myDiet\";\nimport swal from \"sweetalert\"; // 예쁜 alert 창을 위해 사용\n// 로그인 처리\n\nfunction loadLogin(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadLogin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(LoginAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          // action dispatch\n          sessionStorage.setItem(\"jwt\", result.token); // userToken 세션스토리지 저장\n\n          _context.next = 9;\n          return put({\n            type: MY_PAGE_REQUEST,\n            data: result.token\n          });\n\n        case 9:\n          // mypage 정보 바로 조회\n          swal(\"로그인 성공\", \"  \", \"success\", {\n            buttons: false,\n            timer: 1800\n          });\n          _context.next = 17;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          swal(\"로그인 실패\", \"아이디 또는 비밀번호가 일치하지 않거나, 이메일 인증 후 로그인 시도 바랍니다.\", \"error\", {\n            buttons: false,\n            timer: 2000\n          });\n          _context.next = 17;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\n\nfunction watchLoadLogin() {\n  return _regeneratorRuntime.wrap(function watchLoadLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, loadLogin);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //const { Kakao } = window;\n\n\nvar isSignUp = false;\nvar data = {}; // //function* kakaoloadLogin(action) {\n//   try {\n//     // 함수안에 yield 객체만 사용 가능.\n//     // console.log(\"카카오 로그인\");\n//     const result = Kakao.Auth.getAccessToken();\n//     console.log(result);\n//     if (result !== null) {\n//       const res = yield call(getUserInfoAPI); // 해당 동기 함수 호출\n//       const id = res.kakao_account.email.split(\"@\");\n//       data = {\n//         id: id[0],\n//         password: res.kakao_account.email,\n//         name: res.properties.nickname,\n//         email: res.kakao_account.email,\n//       };\n//       yield put({ type: KAKAO_ID_CHECK_REQUEST, id: id[0] }); // id check 여부\n//       // console.log(data);\n//     }\n//   } catch (err) {\n//     yield put({ type: KAKAO_LOG_IN_FAILURE });\n//   }\n// //}\n// function* watchKakaoLoadLogin() {\n//   yield takeLatest(KAKAO_LOG_IN_REQUEST, kakaoloadLogin);\n// }\n// // 카카오아이디 중복체크 처리 및 각 동기 함수 호출.\n// //function* kakaoloadIdCheck(action) {\n//   isSignUp = yield call(KaKaoIdCheckAPI, { id: action.id });\n//   yield put({ type: KAKAO_ID_CHECK_SUCCESS, data: isSignUp });\n//   if (isSignUp === true) {\n//     // 중복이 없다면 해당 카카오 로그인 사용자 정보 insert\n//     // console.log(\"중복이 없으니 여기로 들어옴\");\n//     yield put({ type: KAKAO_SIGN_UP_REQUEST, data }); // id check 여부\n//   } else if (isSignUp === false) {\n//     const temp = { id: data.id, pw: data.password };\n//     yield put({ type: KAKAO_SIGN_UP_FAILURE, data });\n//     const result_info = yield call(LoginAPI, temp); // 해당 동기 함수 호출\n//     // console.log(result_info);\n//     yield put({ type: KAKAO_LOG_IN_SUCCESS, data: result_info }); // action dispatch\n//     sessionStorage.setItem(\"jwt\", result_info.data.accessToken); // userToken 세션스토리지 저장\n//     yield put({ type: MY_PAGE_REQUEST });\n//     swal(\"카카오 로그인 성공\", \"  \", \"success\", {\n//       buttons: false,\n//       timer: 1800,\n//     });\n//   }\n// //}\n// //function* watchKakaoLoadIdCheck() {\n//   yield takeLatest(KAKAO_ID_CHECK_REQUEST, kakaoloadIdCheck);\n// //}\n// // 카카오 회원가입 처리 및 로그인\n// //function* loadKakaoSignUp(action) {\n//   console.log(action);\n//   try {\n//     // console.log(\"회원가입 성공\");\n//     const result = yield call(SignUpAPI, action.data);\n//     yield put({ type: KAKAO_SIGN_UP_SUCCESS, data: result });\n//     const temp = { id: data.id, pw: data.password };\n//     const result_info = yield call(LoginAPI, temp); // 해당 동기 함수 호출\n//     // console.log(result_info);\n//     yield put({ type: KAKAO_LOG_IN_SUCCESS, data: result_info }); // action dispatch\n//     sessionStorage.setItem(\"jwt\", result_info.data.accessToken); // userToken 세션스토리지 저장\n//     yield put({ type: MY_PAGE_REQUEST, data: result.data.accessToken }); // mypage 정보 바로 조회\n//     swal(\"카카오 로그인 성공\", \"  \", \"success\", {\n//       buttons: false,\n//       timer: 1800,\n//     });\n//   } catch (err) {\n//     yield put({ type: KAKAO_SIGN_UP_FAILURE });\n//   }\n// }\n// function* watchKakaoLoadSignUp() {\n//   yield takeLatest(KAKAO_SIGN_UP_REQUEST, loadKakaoSignUp);\n// }\n// 로그아웃 처리\n\nfunction loadLogout(action) {\n  return _regeneratorRuntime.wrap(function loadLogout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          // const result = yield call(LogoutAPI, action.data);\n          sessionStorage.clear(); // userToken 세션스토리지 삭제\n\n          document.location.href = \"/\"; // 로그아웃 처리하면 새로고침 해서 세션 사라진 걸 인식 해줘야함.\n\n          _context3.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLoadLogout() {\n  return _regeneratorRuntime.wrap(function watchLoadLogout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, loadLogout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // 회원가입 처리\n\n\nfunction loadSignUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadSignUp$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(SignUpAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: SIGN_UP_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          swal(\"회원가입 성공\", \"로그인을 진행하여 서비스를 즐겨보세요!\", \"success\");\n          _context5.next = 13;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction watchLoadSignUp() {\n  return _regeneratorRuntime.wrap(function watchLoadSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, loadSignUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // 이메일 중복체크 처리\n// function* loadEmailCheck(action) {\n//   try {\n//     const result = yield call(EmailCheckAPI, action.data);\n//     alert(\"사용할 수 있는 이메일 입니다.\");\n//     yield put({ type: EMAIL_CHECK_SUCCESS, data: result });\n//   } catch (err) {\n//     alert(\"이미 사용중이거나 사용할 수 없는 이메일 입니다.\");\n//     yield put({ type: EMAIL_CHECK_FAILURE });\n//   }\n// }\n// function* watchLoadEmailCheck() {\n//   yield takeLatest(EMAIL_CHECK_REQUEST, loadEmailCheck);\n// }\n// 아이디 중복체크 처리\n\n\nfunction loadIdCheck(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadIdCheck$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return call(IdCheckAPI, action.data);\n\n        case 2:\n          result = _context7.sent;\n\n          if (!(result.data == true)) {\n            _context7.next = 9;\n            break;\n          }\n\n          alert(\"사용할 수 있는 아이디 입니다.\");\n          _context7.next = 7;\n          return put({\n            type: ID_CHECK_SUCCESS,\n            data: result\n          });\n\n        case 7:\n          _context7.next = 10;\n          break;\n\n        case 9:\n          alert(\"이미 사용중이거나 사용할 수 없는 아이디 입니다.\");\n\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadIdCheck() {\n  return _regeneratorRuntime.wrap(function watchLoadIdCheck$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ID_CHECK_REQUEST, loadIdCheck);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction resetIdCheck() {\n  return _regeneratorRuntime.wrap(function resetIdCheck$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return put({\n            type: ID_CHECK_RESET\n          });\n\n        case 3:\n          _context9.next = 8;\n          break;\n\n        case 5:\n          _context9.prev = 5;\n          _context9.t0 = _context9[\"catch\"](0);\n          alert(\"아이디 리셋 실패\");\n\n        case 8:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 5]]);\n}\n\nfunction watchResetIdCheck() {\n  return _regeneratorRuntime.wrap(function watchResetIdCheck$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ID_CHECK_RESET, resetIdCheck);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} // 비밀번호 찾기 처리\n\n\nfunction loadFindPw(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadFindPw$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(ResetPasswordAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: FIND_PW_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          swal(\"비밀번호 찾기 성공\", \"이메일로 임시 비밀번호가 전송되었습니다. 로그인 후 비밀번호 변경 바랍니다.\", \"success\", {\n            timer: 1500\n          });\n          document.location.href = \"/login\";\n          _context11.next = 15;\n          break;\n\n        case 10:\n          _context11.prev = 10;\n          _context11.t0 = _context11[\"catch\"](0);\n          swal(\"비밀번호 찾기 실패\", \"이메일 또는 이름이 일치하지 않습니다.\", \"error\", {\n            timer: 2000\n          });\n          _context11.next = 15;\n          return put({\n            type: FIND_PW_FAILURE\n          });\n\n        case 15:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 10]]);\n}\n\nfunction watchLoadFindPw() {\n  return _regeneratorRuntime.wrap(function watchLoadFindPw$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(FIND_PW_REQUEST, loadFindPw);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction loadAdditionalUserInfo(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadAdditionalUserInfo$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(AdditionalUserInfoAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: USER_ADDITIONAL_INFO_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          swal(\"추가 정보 등록 완료!\", \"서비스를 이용해보세요 :)\", \"success\", {\n            timer: 1500\n          });\n          _context13.next = 14;\n          break;\n\n        case 9:\n          _context13.prev = 9;\n          _context13.t0 = _context13[\"catch\"](0);\n          swal(\"추가 정보 등록 중 오류 발생\", \"error\", {\n            timer: 1500\n          });\n          _context13.next = 14;\n          return put({\n            type: USER_ADDITIONAL_INFO_FAILURE\n          });\n\n        case 14:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 9]]);\n}\n\nfunction watchLoadAdditionalUserInfo() {\n  return _regeneratorRuntime.wrap(function watchLoadAdditionalUserInfo$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(USER_ADDITIONAL_INFO_REQUEST, loadAdditionalUserInfo);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nexport default function UserSaga() {\n  return _regeneratorRuntime.wrap(function UserSaga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([//    fork(watchKakaoLoadSignUp),\n          //    fork(watchKakaoLoadLogin),\n          //    fork(watchKakaoLoadIdCheck),\n          fork(watchLoadLogin), fork(watchLoadLogout), fork(watchLoadSignUp), fork(watchLoadFindPw), //    fork(watchLoadEmailCheck),\n          fork(watchLoadIdCheck), fork(watchResetIdCheck), fork(watchLoadAdditionalUserInfo)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}","map":{"version":3,"sources":["C:/Users/JUN-D/Desktop/헬스케어/11_2/HELF-master/front/src/store/sagas/user.js"],"names":["loadLogin","watchLoadLogin","loadLogout","watchLoadLogout","loadSignUp","watchLoadSignUp","loadIdCheck","watchLoadIdCheck","resetIdCheck","watchResetIdCheck","loadFindPw","watchLoadFindPw","loadAdditionalUserInfo","watchLoadAdditionalUserInfo","UserSaga","all","fork","put","takeLatest","call","useHistory","EmailCheckAPI","LoginAPI","KaKaoIdCheckAPI","IdCheckAPI","ResetPasswordAPI","SignUpAPI","AdditionalUserInfoAPI","getUserInfoAPI","KAKAO_LOG_IN_REQUEST","KAKAO_LOG_IN_SUCCESS","KAKAO_LOG_IN_FAILURE","KAKAO_ID_CHECK_SUCCESS","KAKAO_ID_CHECK_REQUEST","KAKAO_SIGN_UP_REQUEST","KAKAO_SIGN_UP_SUCCESS","KAKAO_SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FIND_PW_REQUEST","FIND_PW_SUCCESS","FIND_PW_FAILURE","ID_CHECK_SUCCESS","ID_CHECK_REQUEST","ID_CHECK_RESET","EMAIL_CHECK_REQUEST","EMAIL_CHECK_FAILURE","EMAIL_CHECK_SUCCESS","USER_ADDITIONAL_INFO_REQUEST","USER_ADDITIONAL_INFO_SUCCESS","USER_ADDITIONAL_INFO_FAILURE","MY_PAGE_REQUEST","MY_DIET_DIARY_LIST_REQUEST","swal","action","result","type","data","sessionStorage","setItem","token","buttons","timer","isSignUp","clear","document","location","href","alert"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport { useHistory } from 'react-router-dom';\nimport {\n  EmailCheckAPI,\n  LoginAPI,\n  KaKaoIdCheckAPI,\n  IdCheckAPI,\n  ResetPasswordAPI,\n  SignUpAPI,\n  AdditionalUserInfoAPI,\n} from \"../apis/user\";\nimport { getUserInfoAPI } from \"../apis/kakaoUser\";\nimport {\n  KAKAO_LOG_IN_REQUEST,\n  KAKAO_LOG_IN_SUCCESS,\n  KAKAO_LOG_IN_FAILURE,\n  KAKAO_ID_CHECK_SUCCESS,\n  KAKAO_ID_CHECK_REQUEST,\n  KAKAO_SIGN_UP_REQUEST,\n  KAKAO_SIGN_UP_SUCCESS,\n  KAKAO_SIGN_UP_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n  FIND_PW_REQUEST,\n  FIND_PW_SUCCESS,\n  FIND_PW_FAILURE,\n  ID_CHECK_SUCCESS,\n  ID_CHECK_REQUEST,\n  ID_CHECK_RESET,\n  EMAIL_CHECK_REQUEST,\n  EMAIL_CHECK_FAILURE,\n  EMAIL_CHECK_SUCCESS,\n  USER_ADDITIONAL_INFO_REQUEST,\n  USER_ADDITIONAL_INFO_SUCCESS,\n  USER_ADDITIONAL_INFO_FAILURE,\n} from \"../modules/user\";\n\nimport { MY_PAGE_REQUEST } from \"../modules/myPage\";\nimport { MY_DIET_DIARY_LIST_REQUEST } from \"../modules/myDiet\";\nimport swal from \"sweetalert\"; // 예쁜 alert 창을 위해 사용\n// 로그인 처리\nfunction* loadLogin(action) {\n  try {\n    // 함수안에 yield 객체만 사용 가능.\n    // console.log(\"함수 요청\");\n    const result = yield call(LoginAPI); // 해당 동기 함수 호출\n    //console.log(result);\n\n    yield put({ type: LOG_IN_SUCCESS, data: result }); // action dispatch\n    sessionStorage.setItem(\"jwt\", result.token);\n     // userToken 세션스토리지 저장\n    yield put({ type: MY_PAGE_REQUEST, data: result.token }); // mypage 정보 바로 조회\n    swal(\"로그인 성공\", \"  \", \"success\", {\n      buttons: false,\n      timer: 1800,\n    }\n\n    );\n\n  } catch (err) {\n    swal(\n      \"로그인 실패\",\n      \"아이디 또는 비밀번호가 일치하지 않거나, 이메일 인증 후 로그인 시도 바랍니다.\",\n      \"error\",\n      {\n        buttons: false,\n        timer: 2000,\n      }\n    );\n    yield put({ type: LOG_IN_FAILURE });\n  }\n}\n\nfunction* watchLoadLogin() {\n  yield takeLatest(LOG_IN_REQUEST, loadLogin);\n}\n//const { Kakao } = window;\nvar isSignUp = false;\nvar data = {};\n// //function* kakaoloadLogin(action) {\n//   try {\n//     // 함수안에 yield 객체만 사용 가능.\n//     // console.log(\"카카오 로그인\");\n//     const result = Kakao.Auth.getAccessToken();\n//     console.log(result);\n//     if (result !== null) {\n//       const res = yield call(getUserInfoAPI); // 해당 동기 함수 호출\n//       const id = res.kakao_account.email.split(\"@\");\n\n//       data = {\n//         id: id[0],\n//         password: res.kakao_account.email,\n//         name: res.properties.nickname,\n//         email: res.kakao_account.email,\n//       };\n\n//       yield put({ type: KAKAO_ID_CHECK_REQUEST, id: id[0] }); // id check 여부\n//       // console.log(data);\n//     }\n//   } catch (err) {\n//     yield put({ type: KAKAO_LOG_IN_FAILURE });\n//   }\n// //}\n\n// function* watchKakaoLoadLogin() {\n//   yield takeLatest(KAKAO_LOG_IN_REQUEST, kakaoloadLogin);\n// }\n\n// // 카카오아이디 중복체크 처리 및 각 동기 함수 호출.\n// //function* kakaoloadIdCheck(action) {\n//   isSignUp = yield call(KaKaoIdCheckAPI, { id: action.id });\n//   yield put({ type: KAKAO_ID_CHECK_SUCCESS, data: isSignUp });\n//   if (isSignUp === true) {\n//     // 중복이 없다면 해당 카카오 로그인 사용자 정보 insert\n//     // console.log(\"중복이 없으니 여기로 들어옴\");\n//     yield put({ type: KAKAO_SIGN_UP_REQUEST, data }); // id check 여부\n//   } else if (isSignUp === false) {\n//     const temp = { id: data.id, pw: data.password };\n//     yield put({ type: KAKAO_SIGN_UP_FAILURE, data });\n//     const result_info = yield call(LoginAPI, temp); // 해당 동기 함수 호출\n//     // console.log(result_info);\n//     yield put({ type: KAKAO_LOG_IN_SUCCESS, data: result_info }); // action dispatch\n//     sessionStorage.setItem(\"jwt\", result_info.data.accessToken); // userToken 세션스토리지 저장\n//     yield put({ type: MY_PAGE_REQUEST });\n//     swal(\"카카오 로그인 성공\", \"  \", \"success\", {\n//       buttons: false,\n//       timer: 1800,\n//     });\n//   }\n// //}\n\n// //function* watchKakaoLoadIdCheck() {\n//   yield takeLatest(KAKAO_ID_CHECK_REQUEST, kakaoloadIdCheck);\n// //}\n\n// // 카카오 회원가입 처리 및 로그인\n// //function* loadKakaoSignUp(action) {\n//   console.log(action);\n//   try {\n//     // console.log(\"회원가입 성공\");\n//     const result = yield call(SignUpAPI, action.data);\n//     yield put({ type: KAKAO_SIGN_UP_SUCCESS, data: result });\n//     const temp = { id: data.id, pw: data.password };\n//     const result_info = yield call(LoginAPI, temp); // 해당 동기 함수 호출\n//     // console.log(result_info);\n//     yield put({ type: KAKAO_LOG_IN_SUCCESS, data: result_info }); // action dispatch\n//     sessionStorage.setItem(\"jwt\", result_info.data.accessToken); // userToken 세션스토리지 저장\n//     yield put({ type: MY_PAGE_REQUEST, data: result.data.accessToken }); // mypage 정보 바로 조회\n\n//     swal(\"카카오 로그인 성공\", \"  \", \"success\", {\n//       buttons: false,\n//       timer: 1800,\n//     });\n//   } catch (err) {\n//     yield put({ type: KAKAO_SIGN_UP_FAILURE });\n//   }\n// }\n\n// function* watchKakaoLoadSignUp() {\n//   yield takeLatest(KAKAO_SIGN_UP_REQUEST, loadKakaoSignUp);\n// }\n// 로그아웃 처리\nfunction* loadLogout(action) {\n  try {\n    // const result = yield call(LogoutAPI, action.data);\n    sessionStorage.clear(); // userToken 세션스토리지 삭제\n    document.location.href = \"/\"; // 로그아웃 처리하면 새로고침 해서 세션 사라진 걸 인식 해줘야함.\n    yield put({ type: LOG_OUT_SUCCESS });\n  } catch (err) {\n    yield put({ type: LOG_OUT_FAILURE });\n  }\n}\n\nfunction* watchLoadLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, loadLogout);\n}\n\n// 회원가입 처리\nfunction* loadSignUp(action) {\n  try {\n    const result = yield call(SignUpAPI, action.data);\n    yield put({ type: SIGN_UP_SUCCESS, data: result });\n    swal(\"회원가입 성공\", \"로그인을 진행하여 서비스를 즐겨보세요!\", \"success\");\n  } catch (err) {\n    yield put({ type: SIGN_UP_FAILURE });\n  }\n}\n\nfunction* watchLoadSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, loadSignUp);\n}\n\n// 이메일 중복체크 처리\n// function* loadEmailCheck(action) {\n//   try {\n//     const result = yield call(EmailCheckAPI, action.data);\n//     alert(\"사용할 수 있는 이메일 입니다.\");\n//     yield put({ type: EMAIL_CHECK_SUCCESS, data: result });\n//   } catch (err) {\n//     alert(\"이미 사용중이거나 사용할 수 없는 이메일 입니다.\");\n//     yield put({ type: EMAIL_CHECK_FAILURE });\n//   }\n// }\n\n// function* watchLoadEmailCheck() {\n//   yield takeLatest(EMAIL_CHECK_REQUEST, loadEmailCheck);\n// }\n\n// 아이디 중복체크 처리\nfunction* loadIdCheck(action) {\n\n  const result = yield call(IdCheckAPI, action.data);\n\n  if (result.data == true) {\n    alert(\"사용할 수 있는 아이디 입니다.\");\n    yield put({ type: ID_CHECK_SUCCESS, data: result });\n  } else {\n    alert(\"이미 사용중이거나 사용할 수 없는 아이디 입니다.\");\n  }\n}\n\nfunction* watchLoadIdCheck() {\n  yield takeLatest(ID_CHECK_REQUEST, loadIdCheck);\n}\n\nfunction* resetIdCheck() {\n  try {\n    yield put({ type: ID_CHECK_RESET });\n  } catch (err) {\n    alert(\"아이디 리셋 실패\");\n  }\n}\n\nfunction* watchResetIdCheck() {\n  yield takeLatest(ID_CHECK_RESET, resetIdCheck);\n}\n\n// 비밀번호 찾기 처리\nfunction* loadFindPw(action) {\n  try {\n    const result = yield call(ResetPasswordAPI, action.data);\n    yield put({ type: FIND_PW_SUCCESS, data: result });\n    swal(\n      \"비밀번호 찾기 성공\",\n      \"이메일로 임시 비밀번호가 전송되었습니다. 로그인 후 비밀번호 변경 바랍니다.\",\n      \"success\",\n      {\n        timer: 1500,\n      }\n    );\n    document.location.href = \"/login\";\n  } catch (err) {\n    swal(\n      \"비밀번호 찾기 실패\",\n      \"이메일 또는 이름이 일치하지 않습니다.\",\n      \"error\",\n      {\n        timer: 2000,\n      }\n    );\n    yield put({ type: FIND_PW_FAILURE });\n  }\n}\n\nfunction* watchLoadFindPw() {\n  yield takeLatest(FIND_PW_REQUEST, loadFindPw);\n}\n\nfunction* loadAdditionalUserInfo(action) {\n  try {\n    const result = yield call(AdditionalUserInfoAPI, action.data);\n    yield put({ type: USER_ADDITIONAL_INFO_SUCCESS, data: result });\n    swal(\"추가 정보 등록 완료!\", \"서비스를 이용해보세요 :)\", \"success\", {\n      timer: 1500,\n    });\n  } catch (err) {\n    swal(\"추가 정보 등록 중 오류 발생\", \"error\", {\n      timer: 1500,\n    });\n    yield put({ type: USER_ADDITIONAL_INFO_FAILURE });\n  }\n}\n\nfunction* watchLoadAdditionalUserInfo() {\n  yield takeLatest(USER_ADDITIONAL_INFO_REQUEST, loadAdditionalUserInfo);\n}\n\nexport default function* UserSaga() {\n  yield all([\n//    fork(watchKakaoLoadSignUp),\n//    fork(watchKakaoLoadLogin),\n//    fork(watchKakaoLoadIdCheck),\n    fork(watchLoadLogin),\n    fork(watchLoadLogout),\n    fork(watchLoadSignUp),\n    fork(watchLoadFindPw),\n//    fork(watchLoadEmailCheck),\n    fork(watchLoadIdCheck),\n    fork(watchResetIdCheck),\n    fork(watchLoadAdditionalUserInfo),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}