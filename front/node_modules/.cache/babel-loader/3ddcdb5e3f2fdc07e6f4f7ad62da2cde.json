{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { stridedSliceImpl } from './StridedSlice_impl';\nexport function stridedSlice(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var begin = attrs.begin,\n      end = attrs.end,\n      strides = attrs.strides,\n      beginMask = attrs.beginMask,\n      endMask = attrs.endMask,\n      ellipsisMask = attrs.ellipsisMask,\n      newAxisMask = attrs.newAxisMask,\n      shrinkAxisMask = attrs.shrinkAxisMask;\n  assertNotComplex(x, 'stridedSlice');\n\n  var _slice_util$sliceInfo = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask),\n      finalShapeSparse = _slice_util$sliceInfo.finalShapeSparse,\n      finalShape = _slice_util$sliceInfo.finalShape,\n      isIdentity = _slice_util$sliceInfo.isIdentity,\n      sliceDim0 = _slice_util$sliceInfo.sliceDim0,\n      isSimpleSlice = _slice_util$sliceInfo.isSimpleSlice,\n      $begin = _slice_util$sliceInfo.begin,\n      $end = _slice_util$sliceInfo.end,\n      $strides = _slice_util$sliceInfo.strides;\n\n  var result; // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(x.shape.length >= 1, function () {\n      return \"Input must have rank at least 1, got: \".concat(x.shape.length);\n    });\n    var size = slice_util.computeOutShape($begin, $end, $strides); // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n\n    var sliced = slice({\n      inputs: {\n        x: x\n      },\n      backend: backend,\n      attrs: {\n        begin: $begin,\n        size: size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend: backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    var xBuf = backend.bufferSync(x);\n    var outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\nexport var stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice\n};","map":null,"metadata":{},"sourceType":"module"}