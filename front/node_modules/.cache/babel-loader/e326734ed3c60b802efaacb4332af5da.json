{"ast":null,"code":"/**\r\n * DevExtreme (esm/viz/core/base_widget.utils.js)\r\n * Version: 23.1.6\r\n * Build date: Fri Oct 13 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { version } from \"../../core/version\";\nimport { format as _stringFormat } from \"../../core/utils/string\";\nimport warnings from \"./errors_warnings\";\nimport { each } from \"../../core/utils/iterator\";\nimport _windowResizeCallbacks from \"../../core/utils/resize_callbacks\";\nimport resizeObserverSingleton from \"../../core/resize_observer\";\nimport { normalizeEnum } from \"./utils\";\nvar ERROR_MESSAGES = warnings.ERROR_MESSAGES;\nexport function createEventTrigger(eventsMap, callbackGetter) {\n  var triggers = {};\n  each(eventsMap, function (name, info) {\n    if (info.name) {\n      createEvent(name);\n    }\n  });\n  var changes;\n\n  triggerEvent.change = function (name) {\n    var eventInfo = eventsMap[name];\n\n    if (eventInfo) {\n      (changes = changes || {})[name] = eventInfo;\n    }\n\n    return !!eventInfo;\n  };\n\n  triggerEvent.applyChanges = function () {\n    if (changes) {\n      each(changes, function (name, eventInfo) {\n        createEvent(eventInfo.newName || name);\n      });\n      changes = null;\n    }\n  };\n\n  triggerEvent.dispose = function () {\n    eventsMap = callbackGetter = triggers = null;\n  };\n\n  return triggerEvent;\n\n  function createEvent(name) {\n    var eventInfo = eventsMap[name];\n    triggers[eventInfo.name] = callbackGetter(name, eventInfo.actionSettings);\n  }\n\n  function triggerEvent(name, arg, complete) {\n    triggers[name](arg);\n    complete && complete();\n  }\n}\nexport var createIncidentOccurred = function createIncidentOccurred(widgetName, eventTrigger) {\n  return function (id, args) {\n    eventTrigger(\"incidentOccurred\", {\n      target: {\n        id: id,\n        type: \"E\" === id[0] ? \"error\" : \"warning\",\n        args: args,\n        text: _stringFormat.apply(null, [ERROR_MESSAGES[id]].concat(args || [])),\n        widget: widgetName,\n        version: version\n      }\n    });\n  };\n};\n\nfunction getResizeManager(resizeCallback) {\n  return function (observe, unsubscribe) {\n    var _createDeferredHandle = createDeferredHandler(resizeCallback, unsubscribe),\n        handler = _createDeferredHandle.handler,\n        dispose = _createDeferredHandle.dispose;\n\n    observe(handler);\n    return dispose;\n  };\n}\n\nfunction createDeferredHandler(callback, unsubscribe) {\n  var timeout;\n\n  var handler = function handler() {\n    clearTimeout(timeout);\n    timeout = setTimeout(callback, 100);\n  };\n\n  return {\n    handler: handler,\n    dispose: function dispose() {\n      clearTimeout(timeout);\n      unsubscribe(handler);\n    }\n  };\n}\n\nexport function createResizeHandler(contentElement, redrawOnResize, resize) {\n  var disposeHandler;\n  var resizeManager = getResizeManager(resize);\n\n  if (\"windowonly\" === normalizeEnum(redrawOnResize)) {\n    disposeHandler = resizeManager(function (handler) {\n      return _windowResizeCallbacks.add(handler);\n    }, function (handler) {\n      return _windowResizeCallbacks.remove(handler);\n    });\n  } else if (true === redrawOnResize) {\n    disposeHandler = resizeManager(function (handler) {\n      return resizeObserverSingleton.observe(contentElement, handler);\n    }, function () {\n      return resizeObserverSingleton.unobserve(contentElement);\n    });\n  }\n\n  return disposeHandler;\n}","map":null,"metadata":{},"sourceType":"module"}