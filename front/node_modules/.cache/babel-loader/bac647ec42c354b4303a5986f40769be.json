{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 21.2.6\n * Build date: Tue Mar 01 2022\n *\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionsManager = void 0;\n\nvar comparer_1 = require(\"./configuration/comparer\");\n\nvar tree_1 = require(\"./configuration/tree\");\n\nvar utils_1 = require(\"./configuration/utils\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar OptionsManager =\n/** @class */\nfunction () {\n  function OptionsManager(templatesManager) {\n    this.guards = {};\n    this.isUpdating = false;\n    this.templatesManager = templatesManager;\n    this.onOptionChanged = this.onOptionChanged.bind(this);\n    this.wrapOptionValue = this.wrapOptionValue.bind(this);\n  }\n\n  OptionsManager.prototype.setInstance = function (instance, config, subscribableOptions, independentEvents) {\n    this.instance = instance;\n    this.currentConfig = config;\n    this.subscribableOptions = new Set(subscribableOptions);\n    this.independentEvents = new Set(independentEvents);\n  };\n\n  OptionsManager.prototype.getInitialOptions = function (rootNode) {\n    var _this = this;\n\n    var config = tree_1.buildConfig(rootNode, false);\n    Object.keys(config.templates).forEach(function (key) {\n      _this.templatesManager.add(key, config.templates[key]);\n    });\n    var options = {};\n    Object.keys(config.options).forEach(function (key) {\n      options[key] = _this.wrapOptionValue(key, config.options[key]);\n    });\n\n    if (this.templatesManager.templatesCount > 0) {\n      options.integrationOptions = {\n        templates: this.templatesManager.templates\n      };\n    }\n\n    return options;\n  };\n\n  OptionsManager.prototype.update = function (config) {\n    var _this = this;\n\n    var changedOptions = [];\n\n    var optionChangedHandler = function optionChangedHandler(_a) {\n      var value = _a.value,\n          fullName = _a.fullName;\n      changedOptions.push([fullName, value]);\n    };\n\n    this.instance.on('optionChanged', optionChangedHandler);\n    var changes = comparer_1.getChanges(config, this.currentConfig);\n\n    if (!changes.options && !changes.templates && !changes.removedOptions.length) {\n      return;\n    }\n\n    this.instance.beginUpdate();\n    this.isUpdating = true;\n    changes.removedOptions.forEach(function (optionName) {\n      _this.resetOption(optionName);\n    });\n    Object.keys(changes.templates).forEach(function (key) {\n      _this.templatesManager.add(key, changes.templates[key]);\n    });\n\n    if (this.templatesManager.templatesCount > 0) {\n      this.setValue('integrationOptions', {\n        templates: this.templatesManager.templates\n      });\n    }\n\n    Object.keys(changes.options).forEach(function (key) {\n      _this.setValue(key, changes.options[key]);\n    });\n    this.isUpdating = false;\n    this.instance.off('optionChanged', optionChangedHandler);\n    this.currentConfig = config;\n    changedOptions.forEach(function (_a) {\n      var name = _a[0],\n          value = _a[1];\n      var currentPropValue = config.options[name];\n\n      if (config.options.hasOwnProperty(name) && currentPropValue !== value) {\n        _this.setValue(name, currentPropValue);\n      }\n    });\n    this.instance.endUpdate();\n  };\n\n  OptionsManager.prototype.onOptionChanged = function (e) {\n    var _this = this;\n\n    var _a;\n\n    if (this.isUpdating) {\n      return;\n    }\n\n    var valueDescriptor = tree_1.findValue(this.currentConfig, e.fullName.split('.'));\n\n    if (!valueDescriptor || valueDescriptor.value !== e.value) {\n      this.callOptionChangeHandler(e.fullName, e.value);\n    }\n\n    valueDescriptor = tree_1.findValue(this.currentConfig, e.fullName.split('.'));\n\n    if (!valueDescriptor) {\n      return;\n    }\n\n    var value = valueDescriptor.value,\n        type = valueDescriptor.type;\n\n    if (value instanceof Array && type === tree_1.ValueType.Array) {\n      for (var i = 0; i < value.length; i += 1) {\n        if (value[i] !== ((_a = e.value) === null || _a === void 0 ? void 0 : _a[i])) {\n          this.setGuard(e.fullName, value);\n          return;\n        }\n      }\n    } else if (type === tree_1.ValueType.Complex && value instanceof Object) {\n      Object.keys(value).forEach(function (key) {\n        var _a;\n\n        if (value[key] === ((_a = e.value) === null || _a === void 0 ? void 0 : _a[key])) {\n          return;\n        }\n\n        _this.setGuard(utils_1.mergeNameParts(e.fullName, key), value[key]);\n      });\n    } else {\n      var valuesAreEqual = value === e.value;\n      var valuesAreEqualObjects = !valuesAreEqual && value instanceof Object && e.value instanceof Object && utils_1.shallowEquals(value, e.value);\n\n      if (valuesAreEqual || valuesAreEqualObjects || this.instance.skipOptionsRollBack) {\n        return;\n      }\n\n      this.setGuard(e.fullName, value);\n    }\n  };\n\n  OptionsManager.prototype.dispose = function () {\n    var _this = this;\n\n    Object.keys(this.guards).forEach(function (optionName) {\n      window.clearTimeout(_this.guards[optionName]);\n      delete _this.guards[optionName];\n    });\n  };\n\n  OptionsManager.prototype.isOptionSubscribable = function (optionName) {\n    return this.subscribableOptions.has(optionName);\n  };\n\n  OptionsManager.prototype.isIndependentEvent = function (optionName) {\n    return this.independentEvents.has(optionName);\n  };\n\n  OptionsManager.prototype.callOptionChangeHandler = function (optionName, optionValue) {\n    if (!this.isOptionSubscribable(optionName)) {\n      return;\n    }\n\n    var parts = optionName.split('.');\n    var propName = parts[parts.length - 1];\n\n    if (propName.startsWith('on')) {\n      return;\n    }\n\n    var eventName = \"on\" + helpers_1.capitalizeFirstLetter(propName) + \"Change\";\n    parts[parts.length - 1] = eventName;\n    var changeEvent = tree_1.findValue(this.currentConfig, parts);\n\n    if (!changeEvent) {\n      return;\n    }\n\n    if (typeof changeEvent.value !== 'function') {\n      throw new Error(\"Invalid value for the \" + eventName + \" property.\\n                \" + eventName + \" must be a function.\");\n    }\n\n    changeEvent.value(optionValue);\n  };\n\n  OptionsManager.prototype.wrapOptionValue = function (name, value) {\n    var _this = this;\n\n    if (name.substr(0, 2) === 'on' && typeof value === 'function') {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        if (!_this.isUpdating || _this.isIndependentEvent(name)) {\n          value.apply(void 0, args);\n        }\n      };\n    }\n\n    return value;\n  };\n\n  OptionsManager.prototype.setGuard = function (optionName, optionValue) {\n    var _this = this;\n\n    if (this.guards[optionName] !== undefined) {\n      return;\n    }\n\n    var guardId = window.setTimeout(function () {\n      _this.setValue(optionName, optionValue);\n\n      window.clearTimeout(guardId);\n      delete _this.guards[optionName];\n    });\n    this.guards[optionName] = guardId;\n  };\n\n  OptionsManager.prototype.resetOption = function (name) {\n    this.instance.resetOption(name);\n  };\n\n  OptionsManager.prototype.setValue = function (name, value) {\n    if (this.guards[name]) {\n      window.clearTimeout(this.guards[name]);\n      delete this.guards[name];\n    }\n\n    this.instance.option(name, this.wrapOptionValue(name, value));\n  };\n\n  return OptionsManager;\n}();\n\nexports.OptionsManager = OptionsManager;","map":null,"metadata":{},"sourceType":"script"}