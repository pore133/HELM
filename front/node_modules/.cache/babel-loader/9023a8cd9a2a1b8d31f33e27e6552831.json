{"ast":null,"code":"\"use strict\";\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@tensorflow-models/posenet/dist/util\");\n\nvar FILL_COLOR = \"aqua\";\nvar STROKE_COLOR = \"aqua\";\nvar KEYPOINT_SIZE = 4;\nvar LINE_WIDTH = 2;\n/**\n * Draw pose keypoints onto a canvas\n */\n\nfunction drawKeypoints(keypoints, minConfidence, ctx, keypointSize, fillColor, strokeColor, scale) {\n  if (keypointSize === void 0) {\n    keypointSize = KEYPOINT_SIZE;\n  }\n\n  if (fillColor === void 0) {\n    fillColor = FILL_COLOR;\n  }\n\n  if (strokeColor === void 0) {\n    strokeColor = STROKE_COLOR;\n  }\n\n  if (scale === void 0) {\n    scale = 1;\n  }\n\n  for (var i = 0; i < keypoints.length; i++) {\n    var keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    var _a = keypoint.position,\n        y = _a.y,\n        x = _a.x;\n    drawPoint(ctx, y * scale, x * scale, keypointSize, fillColor, strokeColor);\n  }\n}\n\nexports.drawKeypoints = drawKeypoints;\n\nfunction drawPoint(ctx, y, x, keypointSize, fillColor, strokeColor) {\n  ctx.fillStyle = fillColor;\n  ctx.strokeStyle = strokeColor;\n  ctx.beginPath();\n  ctx.arc(x, y, keypointSize, 0, 2 * Math.PI);\n  ctx.fill();\n  ctx.stroke();\n}\n\nexports.drawPoint = drawPoint;\n\nfunction toTuple(position) {\n  return [position.y, position.x];\n}\n\nexports.toTuple = toTuple;\n\nfunction drawSkeleton(keypoints, minConfidence, ctx, lineWidth, strokeColor, scale) {\n  if (lineWidth === void 0) {\n    lineWidth = LINE_WIDTH;\n  }\n\n  if (strokeColor === void 0) {\n    strokeColor = STROKE_COLOR;\n  }\n\n  if (scale === void 0) {\n    scale = 1;\n  }\n\n  var adjacentKeyPoints = util_1.getAdjacentKeyPoints(keypoints, minConfidence);\n  adjacentKeyPoints.forEach(function (keypoints) {\n    drawSegment(toTuple(keypoints[0].position), toTuple(keypoints[1].position), ctx, lineWidth, strokeColor, scale);\n  });\n}\n\nexports.drawSkeleton = drawSkeleton;\n\nfunction drawSegment(_a, _b, ctx, lineWidth, strokeColor, scale) {\n  var ay = _a[0],\n      ax = _a[1];\n  var by = _b[0],\n      bx = _b[1];\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = strokeColor;\n  ctx.stroke();\n}\n\nexports.drawSegment = drawSegment;","map":null,"metadata":{},"sourceType":"script"}