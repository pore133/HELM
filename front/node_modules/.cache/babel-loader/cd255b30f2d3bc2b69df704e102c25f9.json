{"ast":null,"code":"import React, { useRef, useState, useEffect, useImperativeHandle } from 'react';\nimport styled from 'styled-components';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n\nvar Wrapper = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n\"], [\"\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n\"])));\nvar Container = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n  width: 100%;\\n  \", \"\\n\"], [\"\\n  width: 100%;\\n  \", \"\\n\"])), function (_a) {\n  var aspectRatio = _a.aspectRatio;\n  return aspectRatio === 'cover' ? \"\\n    position: absolute;\\n    bottom: 0;\\n    top: 0;\\n    left: 0;\\n    right: 0;\" : \"\\n    position: relative;\\n    padding-bottom: \" + 100 / aspectRatio + \"%;\";\n});\nvar ErrorMsg = styled.div(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n  padding: 40px;\\n\"], [\"\\n  padding: 40px;\\n\"])));\nvar Cam = styled.video(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  object-fit: cover;\\n  z-index: 0;\\n  transform: rotateY(\", \");\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  object-fit: cover;\\n  z-index: 0;\\n  transform: rotateY(\", \");\\n\"])), function (_a) {\n  var mirrored = _a.mirrored;\n  return mirrored ? '180deg' : '0deg';\n});\nvar Canvas = styled.canvas(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\n  display: none;\\n\"], [\"\\n  display: none;\\n\"])));\nvar templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;\nvar Camera = React.forwardRef(function (_a, ref) {\n  var _b = _a.facingMode,\n      facingMode = _b === void 0 ? 'user' : _b,\n      _c = _a.aspectRatio,\n      aspectRatio = _c === void 0 ? 'cover' : _c,\n      _d = _a.numberOfCamerasCallback,\n      numberOfCamerasCallback = _d === void 0 ? function () {\n    return null;\n  } : _d,\n      _e = _a.errorMessages,\n      errorMessages = _e === void 0 ? {\n    noCameraAccessible: 'No camera device accessible. Please connect your camera or try a different browser.',\n    permissionDenied: 'Permission denied. Please refresh and give camera permission.',\n    switchCamera: 'It is not possible to switch camera to different one because there is only one video device accessible.',\n    canvas: 'Canvas is not supported.'\n  } : _e;\n  var player = useRef(null);\n  var canvas = useRef(null);\n  var container = useRef(null);\n\n  var _f = useState(0),\n      numberOfCameras = _f[0],\n      setNumberOfCameras = _f[1];\n\n  var _g = useState(null),\n      stream = _g[0],\n      setStream = _g[1];\n\n  var _h = useState(facingMode),\n      currentFacingMode = _h[0],\n      setFacingMode = _h[1];\n\n  var _j = useState(false),\n      notSupported = _j[0],\n      setNotSupported = _j[1];\n\n  var _k = useState(false),\n      permissionDenied = _k[0],\n      setPermissionDenied = _k[1];\n\n  useEffect(function () {\n    numberOfCamerasCallback(numberOfCameras);\n  }, [numberOfCameras]);\n  useImperativeHandle(ref, function () {\n    return {\n      takePhoto: function takePhoto() {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n        if (numberOfCameras < 1) {\n          throw new Error(errorMessages.noCameraAccessible);\n        }\n\n        if ((_a = canvas) === null || _a === void 0 ? void 0 : _a.current) {\n          var playerWidth = ((_c = (_b = player) === null || _b === void 0 ? void 0 : _b.current) === null || _c === void 0 ? void 0 : _c.videoWidth) || 1280;\n          var playerHeight = ((_e = (_d = player) === null || _d === void 0 ? void 0 : _d.current) === null || _e === void 0 ? void 0 : _e.videoHeight) || 720;\n          var playerAR = playerWidth / playerHeight;\n          var canvasWidth = ((_g = (_f = container) === null || _f === void 0 ? void 0 : _f.current) === null || _g === void 0 ? void 0 : _g.offsetWidth) || 1280;\n          var canvasHeight = ((_j = (_h = container) === null || _h === void 0 ? void 0 : _h.current) === null || _j === void 0 ? void 0 : _j.offsetHeight) || 1280;\n          var canvasAR = canvasWidth / canvasHeight;\n          var sX = void 0,\n              sY = void 0,\n              sW = void 0,\n              sH = void 0;\n\n          if (playerAR > canvasAR) {\n            sH = playerHeight;\n            sW = playerHeight * canvasAR;\n            sX = (playerWidth - sW) / 2;\n            sY = 0;\n          } else {\n            sW = playerWidth;\n            sH = playerWidth / canvasAR;\n            sX = 0;\n            sY = (playerHeight - sH) / 2;\n          }\n\n          canvas.current.width = sW;\n          canvas.current.height = sH;\n          var context = canvas.current.getContext('2d');\n\n          if (context && ((_k = player) === null || _k === void 0 ? void 0 : _k.current)) {\n            context.drawImage(player.current, sX, sY, sW, sH, 0, 0, sW, sH);\n          }\n\n          var imgData = canvas.current.toDataURL('image/jpeg');\n          return imgData;\n        } else {\n          throw new Error(errorMessages.canvas);\n        }\n      },\n      switchCamera: function switchCamera() {\n        if (numberOfCameras < 1) {\n          throw new Error(errorMessages.noCameraAccessible);\n        } else if (numberOfCameras < 2) {\n          console.error('Error: Unable to switch camera. Only one device is accessible.'); // console only\n        }\n\n        var newFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';\n        setFacingMode(newFacingMode);\n        return newFacingMode;\n      },\n      getNumberOfCameras: function getNumberOfCameras() {\n        return numberOfCameras;\n      }\n    };\n  });\n  useEffect(function () {\n    initCameraStream(stream, setStream, currentFacingMode, setNumberOfCameras, setNotSupported, setPermissionDenied);\n  }, [currentFacingMode]);\n  useEffect(function () {\n    if (stream && player && player.current) {\n      player.current.srcObject = stream;\n    }\n\n    return function () {\n      if (stream) {\n        stream.getTracks().forEach(function (track) {\n          track.stop();\n        });\n      }\n    };\n  }, [stream]);\n  return React.createElement(Container, {\n    ref: container,\n    aspectRatio: aspectRatio\n  }, React.createElement(Wrapper, null, notSupported ? React.createElement(ErrorMsg, null, errorMessages.noCameraAccessible) : null, permissionDenied ? React.createElement(ErrorMsg, null, errorMessages.permissionDenied) : null, React.createElement(Cam, {\n    ref: player,\n    id: \"video\",\n    muted: true,\n    autoPlay: true,\n    playsInline: true,\n    mirrored: currentFacingMode === 'user' ? true : false\n  }), React.createElement(Canvas, {\n    ref: canvas\n  })));\n});\nCamera.displayName = 'Camera';\n\nvar initCameraStream = function initCameraStream(stream, setStream, currentFacingMode, setNumberOfCameras, setNotSupported, setPermissionDenied) {\n  var _a, _b; // stop any active streams in the window\n\n\n  if (stream) {\n    stream.getTracks().forEach(function (track) {\n      track.stop();\n    });\n  }\n\n  var constraints = {\n    audio: false,\n    video: {\n      facingMode: currentFacingMode,\n      width: {\n        ideal: 1920\n      },\n      height: {\n        ideal: 1920\n      }\n    }\n  };\n\n  if ((_b = (_a = navigator) === null || _a === void 0 ? void 0 : _a.mediaDevices) === null || _b === void 0 ? void 0 : _b.getUserMedia) {\n    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n      setStream(handleSuccess(stream, setNumberOfCameras));\n    }).catch(function (err) {\n      handleError(err, setNotSupported, setPermissionDenied);\n    });\n  } else {\n    var getWebcam = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n\n    if (getWebcam) {\n      getWebcam(constraints, function (stream) {\n        setStream(handleSuccess(stream, setNumberOfCameras));\n      }, function (err) {\n        handleError(err, setNotSupported, setPermissionDenied);\n      });\n    } else {\n      setNotSupported(true);\n    }\n  }\n};\n\nvar handleSuccess = function handleSuccess(stream, setNumberOfCameras) {\n  navigator.mediaDevices.enumerateDevices().then(function (r) {\n    return setNumberOfCameras(r.filter(function (i) {\n      return i.kind === 'videoinput';\n    }).length);\n  });\n  return stream;\n};\n\nvar handleError = function handleError(error, setNotSupported, setPermissionDenied) {\n  console.error(error); //https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n\n  if (error.name === 'PermissionDeniedError') {\n    setPermissionDenied(true);\n  } else {\n    setNotSupported(true);\n  }\n};\n\nexport { Camera };","map":null,"metadata":{},"sourceType":"module"}