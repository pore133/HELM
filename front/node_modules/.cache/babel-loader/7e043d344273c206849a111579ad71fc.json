{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\JUN-D\\\\Desktop\\\\\\uD5EC\\uC2A4\\uCF00\\uC5B4\\\\11_6\\\\HELM\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\JUN-D\\\\Desktop\\\\\\uD5EC\\uC2A4\\uCF00\\uC5B4\\\\11_6\\\\HELM\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport var PackProgram = /*#__PURE__*/function () {\n  function PackProgram(outputShape) {\n    _classCallCheck(this, PackProgram);\n\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true; // Only input / output 3D tensors.\n\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = \"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";\n    } else {\n      var channels = getChannels('rc', this.rank);\n      var dtype = getCoordsDataType(this.rank);\n      var outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      var setup = this.getSetup(channels);\n      var output = this.getOutput(channels);\n      this.userCode = \"\\n        void main() {\\n          \".concat(dtype, \" rc = getOutputCoords();\\n\\n          if(\").concat(outOfBoundsCondition, \") {\\n            setOutput(vec4(0));\\n          } else {\\n            \").concat(setup, \"\\n\\n            setOutput(vec4(\").concat(output, \"));\\n          }\\n        }\\n      \");\n    }\n  }\n\n  _createClass(PackProgram, [{\n    key: \"getSourceCoordsArr\",\n    value: function getSourceCoordsArr(dims) {\n      var coords = [];\n\n      for (var row = 0; row <= 1; row++) {\n        for (var col = 0; col <= 1; col++) {\n          var coord = \"\".concat(row === 0 ? 'r' : 'rp1', \", \").concat(col === 0 ? 'c' : 'cp1');\n\n          for (var d = 2; d < this.rank; d++) {\n            coord = \"\".concat(dims[dims.length - 1 - d], \",\") + coord;\n          }\n\n          coords.push(coord);\n        }\n      }\n\n      return coords;\n    }\n  }, {\n    key: \"getOutOfBoundsCondition\",\n    value: function getOutOfBoundsCondition(dims) {\n      if (this.rank === 1) {\n        return \"rc > \".concat(this.enableShapeUniforms ? 'outShape' : this.outputShape[0]);\n      }\n\n      var cond = '';\n\n      for (var i = this.rank - 2; i < this.rank; i++) {\n        cond += \"\".concat(dims[i], \" >= \").concat(this.enableShapeUniforms ? \"outShape[\".concat(i, \"]\") : this.outputShape[i]);\n\n        if (i < this.rank - 1) {\n          cond += '||';\n        }\n      }\n\n      return cond;\n    }\n  }, {\n    key: \"getSetup\",\n    value: function getSetup(dims) {\n      if (this.rank === 1) {\n        return '';\n      }\n\n      var innerDims = dims.slice(-2);\n      var col = this.enableShapeUniforms ? \"outShape[\".concat(this.rank, \" - 1]\") : this.outputShape[this.rank - 1];\n      var row = this.enableShapeUniforms ? \"outShape[\".concat(this.rank, \" - 2]\") : this.outputShape[this.rank - 2];\n      return \"\\n      int r = \".concat(innerDims[0], \";\\n      int c = \").concat(innerDims[1], \";\\n      int rp1 = r + 1;\\n      int cp1 = c + 1;\\n\\n      bool cEdge = cp1 >= \").concat(col, \";\\n      bool rEdge = rp1 >= \").concat(row, \";\\n    \");\n    }\n  }, {\n    key: \"getOutput\",\n    value: function getOutput(dims) {\n      var sourceCoords = this.getSourceCoordsArr(dims);\n\n      if (this.rank === 1) {\n        var outShape = this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n        return \"getA(rc), (rc + 1 >= \".concat(outShape, \" ? 0. : getA(rc + 1)), 0, 0\");\n      }\n\n      return \"getA(\".concat(sourceCoords[0], \"),\\n            cEdge ? 0. : getA(\").concat(sourceCoords[1], \"),\\n            rEdge ? 0. : getA(\").concat(sourceCoords[2], \"),\\n            rEdge || cEdge ? 0. : getA(\").concat(sourceCoords[3], \")\");\n    }\n  }]);\n\n  return PackProgram;\n}();","map":null,"metadata":{},"sourceType":"module"}