{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 21.2.6\n * Build date: Tue Mar 01 2022\n *\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildConfigTree = exports.processChildren = void 0;\n\nvar React = require(\"react\");\n\nvar widget_config_1 = require(\"../../widget-config\");\n\nvar element_1 = require(\"./element\");\n\nvar utils_1 = require(\"../utils\");\n\nvar templates_1 = require(\"./templates\");\n\nfunction processChildren(parentElement, parentFullName) {\n  var templates = [];\n  var configCollections = {};\n  var configs = {};\n  var hasTranscludedContent = false;\n  React.Children.map(parentElement.props.children, function (child) {\n    var element = element_1.getElementInfo(child, parentElement.descriptor.expectedChildren);\n\n    if (element.type === element_1.ElementType.Unknown) {\n      if (child !== null && child !== undefined && child !== false) {\n        hasTranscludedContent = true;\n      }\n\n      return;\n    }\n\n    if (element.type === element_1.ElementType.Template) {\n      var template = templates_1.getNamedTemplate(element.props);\n\n      if (template) {\n        templates.push(template);\n      }\n\n      return;\n    }\n\n    if (element.descriptor.isCollection) {\n      var collection = configCollections[element.descriptor.name];\n\n      if (!collection) {\n        collection = [];\n        configCollections[element.descriptor.name] = collection;\n      } // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n      var collectionItem = createConfigNode(element, utils_1.mergeNameParts(parentFullName, element.descriptor.name) + \"[\" + collection.length + \"]\");\n      collection.push(collectionItem);\n      return;\n    } // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    var configNode = createConfigNode(element, parentFullName);\n    configs[element.descriptor.name] = configNode;\n  });\n  return {\n    configs: configs,\n    configCollections: configCollections,\n    templates: templates,\n    hasTranscludedContent: hasTranscludedContent\n  };\n}\n\nexports.processChildren = processChildren;\n\nfunction createConfigNode(element, path) {\n  var fullName = element.descriptor.isCollection ? path : utils_1.mergeNameParts(path, element.descriptor.name);\n  var separatedValues = widget_config_1.separateProps(element.props, element.descriptor.initialValuesProps, element.descriptor.templates);\n  var childrenData = processChildren(element, fullName);\n  element.descriptor.templates.forEach(function (templateMeta) {\n    var template = templates_1.getAnonymousTemplate(element.props, templateMeta, path.length > 0 ? childrenData.hasTranscludedContent : false);\n\n    if (template) {\n      childrenData.templates.push(template);\n    }\n  });\n  return {\n    fullName: fullName,\n    predefinedOptions: element.descriptor.predefinedValuesProps,\n    initialOptions: separatedValues.defaults,\n    options: separatedValues.options,\n    templates: childrenData.templates,\n    configCollections: childrenData.configCollections,\n    configs: childrenData.configs\n  };\n}\n\nfunction buildConfigTree(widgetDescriptor, props) {\n  return createConfigNode({\n    type: element_1.ElementType.Option,\n    descriptor: __assign({\n      name: '',\n      isCollection: false\n    }, widgetDescriptor),\n    props: props\n  }, '');\n}\n\nexports.buildConfigTree = buildConfigTree;","map":null,"metadata":{},"sourceType":"script"}