{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\JUN-D\\\\Desktop\\\\\\uD5EC\\uC2A4\\uCF00\\uC5B4\\\\11_2\\\\HELF-master\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/**\r\n * DevExtreme (esm/localization/message.js)\r\n * Version: 23.1.6\r\n * Build date: Fri Oct 13 2023\r\n *\r\n * Copyright (c) 2012 - 2023 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dependencyInjector from \"../core/utils/dependency_injector\";\nimport { extend } from \"../core/utils/extend\";\nimport { format as stringFormat } from \"../core/utils/string\";\nimport { humanize } from \"../core/utils/inflector\";\nimport coreLocalization from \"./core\";\nimport { defaultMessages } from \"./default_messages\";\nvar baseDictionary = extend(true, {}, defaultMessages);\n\nvar getDataByLocale = function getDataByLocale(localeData, locale) {\n  var _Object$entries$find;\n\n  return localeData[locale] || (null === locale || void 0 === locale ? void 0 : locale.toLowerCase) && (null === (_Object$entries$find = Object.entries(localeData).find(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        key = _ref2[0];\n\n    return key.toLowerCase() === locale.toLowerCase();\n  })) || void 0 === _Object$entries$find ? void 0 : _Object$entries$find[1]) || {};\n};\n\nvar newMessages = {};\nvar messageLocalization = dependencyInjector({\n  engine: function engine() {\n    return \"base\";\n  },\n  _dictionary: baseDictionary,\n  load: function load(messages) {\n    extend(true, this._dictionary, messages);\n  },\n  _localizablePrefix: \"@\",\n  setup: function setup(localizablePrefix) {\n    this._localizablePrefix = localizablePrefix;\n  },\n  localizeString: function localizeString(text) {\n    var that = this;\n    var regex = new RegExp(\"(^|[^a-zA-Z_0-9\" + that._localizablePrefix + \"-]+)(\" + that._localizablePrefix + \"{1,2})([a-zA-Z_0-9-]+)\", \"g\");\n    var escapeString = that._localizablePrefix + that._localizablePrefix;\n    return text.replace(regex, function (str, prefix, escape, localizationKey) {\n      var defaultResult = that._localizablePrefix + localizationKey;\n      var result;\n\n      if (escape !== escapeString) {\n        result = that.format(localizationKey);\n      }\n\n      if (!result) {\n        newMessages[localizationKey] = humanize(localizationKey);\n      }\n\n      return prefix + (result || defaultResult);\n    });\n  },\n  getMessagesByLocales: function getMessagesByLocales() {\n    return this._dictionary;\n  },\n  getDictionary: function getDictionary(onlyNew) {\n    if (onlyNew) {\n      return newMessages;\n    }\n\n    return extend({}, newMessages, this.getMessagesByLocales()[coreLocalization.locale()]);\n  },\n  getFormatter: function getFormatter(key) {\n    return this._getFormatterBase(key) || this._getFormatterBase(key, \"en\");\n  },\n  _getFormatterBase: function _getFormatterBase(key, locale) {\n    var _this = this;\n\n    var message = coreLocalization.getValueByClosestLocale(function (locale) {\n      return getDataByLocale(_this._dictionary, locale)[key];\n    });\n\n    if (message) {\n      return function () {\n        var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);\n        args.unshift(message);\n        return stringFormat.apply(this, args);\n      };\n    }\n  },\n  format: function format(key) {\n    var formatter = this.getFormatter(key);\n    var values = Array.prototype.slice.call(arguments, 1);\n    return formatter && formatter.apply(this, values) || \"\";\n  }\n});\nexport default messageLocalization;","map":null,"metadata":{},"sourceType":"module"}