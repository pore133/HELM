{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\JUN-D\\\\Desktop\\\\\\uD5EC\\uC2A4\\uCF00\\uC5B4\\\\11_2\\\\HELF-master\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadLogin),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(kakaoloadLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchKakaoLoadLogin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(kakaoloadIdCheck),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchKakaoLoadIdCheck),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadKakaoSignUp),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchKakaoLoadSignUp),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(loadLogout),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadLogout),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(loadSignUp),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadSignUp),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(loadEmailCheck),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadEmailCheck),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(loadIdCheck),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadIdCheck),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(resetIdCheck),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchResetIdCheck),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(loadFindPw),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadFindPw),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(loadAdditionalUserInfo),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadAdditionalUserInfo),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(UserSaga);\n\nimport { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport { EmailCheckAPI, LoginAPI, KaKaoIdCheckAPI, IdCheckAPI, ResetPasswordAPI, SignUpAPI, AdditionalUserInfoAPI } from \"../apis/user\";\nimport { getUserInfoAPI } from \"../apis/kakaoUser\";\nimport { KAKAO_LOG_IN_REQUEST, KAKAO_LOG_IN_SUCCESS, KAKAO_LOG_IN_FAILURE, KAKAO_ID_CHECK_SUCCESS, KAKAO_ID_CHECK_REQUEST, KAKAO_SIGN_UP_REQUEST, KAKAO_SIGN_UP_SUCCESS, KAKAO_SIGN_UP_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FIND_PW_REQUEST, FIND_PW_SUCCESS, FIND_PW_FAILURE, ID_CHECK_SUCCESS, ID_CHECK_REQUEST, ID_CHECK_RESET, EMAIL_CHECK_REQUEST, EMAIL_CHECK_FAILURE, EMAIL_CHECK_SUCCESS, USER_ADDITIONAL_INFO_REQUEST, USER_ADDITIONAL_INFO_SUCCESS, USER_ADDITIONAL_INFO_FAILURE } from \"../modules/user\";\nimport { MY_PAGE_REQUEST } from \"../modules/myPage\";\nimport { MY_DIET_DIARY_LIST_REQUEST } from \"../modules/myDiet\";\nimport swal from \"sweetalert\"; // 예쁜 alert 창을 위해 사용\n// 로그인 처리\n\nfunction loadLogin(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadLogin$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(LoginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          // action dispatch\n          sessionStorage.setItem(\"jwt\", result.data.accessToken); // userToken 세션스토리지 저장\n\n          _context.next = 9;\n          return put({\n            type: MY_PAGE_REQUEST,\n            data: result.data.accessToken\n          });\n\n        case 9:\n          // mypage 정보 바로 조회\n          swal(\"로그인 성공\", \"  \", \"success\", {\n            buttons: false,\n            timer: 1800\n          });\n          _context.next = 17;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          swal(\"로그인 실패\", \"아이디 또는 비밀번호가 일치하지 않거나, 이메일 인증 후 로그인 시도 바랍니다.\", \"error\", {\n            buttons: false,\n            timer: 2000\n          });\n          _context.next = 17;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\n\nfunction watchLoadLogin() {\n  return _regeneratorRuntime.wrap(function watchLoadLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, loadLogin);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nvar _window = window,\n    Kakao = _window.Kakao;\nvar isSignUp = false;\nvar data = {};\n\nfunction kakaoloadLogin(action) {\n  var result, res, id;\n  return _regeneratorRuntime.wrap(function kakaoloadLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          // 함수안에 yield 객체만 사용 가능.\n          // console.log(\"카카오 로그인\");\n          result = Kakao.Auth.getAccessToken();\n          console.log(result);\n\n          if (!(result !== null)) {\n            _context3.next = 11;\n            break;\n          }\n\n          _context3.next = 6;\n          return call(getUserInfoAPI);\n\n        case 6:\n          res = _context3.sent;\n          // 해당 동기 함수 호출\n          id = res.kakao_account.email.split(\"@\");\n          data = {\n            id: id[0],\n            password: res.kakao_account.email,\n            name: res.properties.nickname,\n            email: res.kakao_account.email\n          };\n          _context3.next = 11;\n          return put({\n            type: KAKAO_ID_CHECK_REQUEST,\n            id: id[0]\n          });\n\n        case 11:\n          _context3.next = 17;\n          break;\n\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 17;\n          return put({\n            type: KAKAO_LOG_IN_FAILURE\n          });\n\n        case 17:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 13]]);\n}\n\nfunction watchKakaoLoadLogin() {\n  return _regeneratorRuntime.wrap(function watchKakaoLoadLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(KAKAO_LOG_IN_REQUEST, kakaoloadLogin);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // 카카오아이디 중복체크 처리 및 각 동기 함수 호출.\n\n\nfunction kakaoloadIdCheck(action) {\n  var temp, result_info;\n  return _regeneratorRuntime.wrap(function kakaoloadIdCheck$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return call(KaKaoIdCheckAPI, {\n            id: action.id\n          });\n\n        case 2:\n          isSignUp = _context5.sent;\n          _context5.next = 5;\n          return put({\n            type: KAKAO_ID_CHECK_SUCCESS,\n            data: isSignUp\n          });\n\n        case 5:\n          if (!(isSignUp === true)) {\n            _context5.next = 10;\n            break;\n          }\n\n          _context5.next = 8;\n          return put({\n            type: KAKAO_SIGN_UP_REQUEST,\n            data: data\n          });\n\n        case 8:\n          _context5.next = 23;\n          break;\n\n        case 10:\n          if (!(isSignUp === false)) {\n            _context5.next = 23;\n            break;\n          }\n\n          temp = {\n            id: data.id,\n            pw: data.password\n          };\n          _context5.next = 14;\n          return put({\n            type: KAKAO_SIGN_UP_FAILURE,\n            data: data\n          });\n\n        case 14:\n          _context5.next = 16;\n          return call(LoginAPI, temp);\n\n        case 16:\n          result_info = _context5.sent;\n          _context5.next = 19;\n          return put({\n            type: KAKAO_LOG_IN_SUCCESS,\n            data: result_info\n          });\n\n        case 19:\n          // action dispatch\n          sessionStorage.setItem(\"jwt\", result_info.data.accessToken); // userToken 세션스토리지 저장\n\n          _context5.next = 22;\n          return put({\n            type: MY_PAGE_REQUEST\n          });\n\n        case 22:\n          swal(\"카카오 로그인 성공\", \"  \", \"success\", {\n            buttons: false,\n            timer: 1800\n          });\n\n        case 23:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchKakaoLoadIdCheck() {\n  return _regeneratorRuntime.wrap(function watchKakaoLoadIdCheck$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(KAKAO_ID_CHECK_REQUEST, kakaoloadIdCheck);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // 카카오 회원가입 처리 및 로그인\n\n\nfunction loadKakaoSignUp(action) {\n  var result, temp, result_info;\n  return _regeneratorRuntime.wrap(function loadKakaoSignUp$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          console.log(action);\n          _context7.prev = 1;\n          _context7.next = 4;\n          return call(SignUpAPI, action.data);\n\n        case 4:\n          result = _context7.sent;\n          _context7.next = 7;\n          return put({\n            type: KAKAO_SIGN_UP_SUCCESS,\n            data: result\n          });\n\n        case 7:\n          temp = {\n            id: data.id,\n            pw: data.password\n          };\n          _context7.next = 10;\n          return call(LoginAPI, temp);\n\n        case 10:\n          result_info = _context7.sent;\n          _context7.next = 13;\n          return put({\n            type: KAKAO_LOG_IN_SUCCESS,\n            data: result_info\n          });\n\n        case 13:\n          // action dispatch\n          sessionStorage.setItem(\"jwt\", result_info.data.accessToken); // userToken 세션스토리지 저장\n\n          _context7.next = 16;\n          return put({\n            type: MY_PAGE_REQUEST,\n            data: result.data.accessToken\n          });\n\n        case 16:\n          // mypage 정보 바로 조회\n          swal(\"카카오 로그인 성공\", \"  \", \"success\", {\n            buttons: false,\n            timer: 1800\n          });\n          _context7.next = 23;\n          break;\n\n        case 19:\n          _context7.prev = 19;\n          _context7.t0 = _context7[\"catch\"](1);\n          _context7.next = 23;\n          return put({\n            type: KAKAO_SIGN_UP_FAILURE\n          });\n\n        case 23:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[1, 19]]);\n}\n\nfunction watchKakaoLoadSignUp() {\n  return _regeneratorRuntime.wrap(function watchKakaoLoadSignUp$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(KAKAO_SIGN_UP_REQUEST, loadKakaoSignUp);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} // 로그아웃 처리\n\n\nfunction loadLogout(action) {\n  return _regeneratorRuntime.wrap(function loadLogout$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          // const result = yield call(LogoutAPI, action.data);\n          sessionStorage.clear(); // userToken 세션스토리지 삭제\n\n          document.location.href = \"/\"; // 로그아웃 처리하면 새로고침 해서 세션 사라진 걸 인식 해줘야함.\n\n          _context9.next = 5;\n          return put({\n            type: LOG_OUT_SUCCESS\n          });\n\n        case 5:\n          _context9.next = 11;\n          break;\n\n        case 7:\n          _context9.prev = 7;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 11;\n          return put({\n            type: LOG_OUT_FAILURE\n          });\n\n        case 11:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 7]]);\n}\n\nfunction watchLoadLogout() {\n  return _regeneratorRuntime.wrap(function watchLoadLogout$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, loadLogout);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} // 회원가입 처리\n\n\nfunction loadSignUp(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadSignUp$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(SignUpAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: SIGN_UP_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          swal(\"회원가입 성공\", \"로그인을 진행하여 서비스를 즐겨보세요!\", \"success\");\n          _context11.next = 13;\n          break;\n\n        case 9:\n          _context11.prev = 9;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 13;\n          return put({\n            type: SIGN_UP_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 9]]);\n}\n\nfunction watchLoadSignUp() {\n  return _regeneratorRuntime.wrap(function watchLoadSignUp$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, loadSignUp);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n} // 이메일 중복체크 처리\n\n\nfunction loadEmailCheck(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadEmailCheck$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(EmailCheckAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          alert(\"사용할 수 있는 이메일 입니다.\");\n          _context13.next = 7;\n          return put({\n            type: EMAIL_CHECK_SUCCESS,\n            data: result\n          });\n\n        case 7:\n          _context13.next = 14;\n          break;\n\n        case 9:\n          _context13.prev = 9;\n          _context13.t0 = _context13[\"catch\"](0);\n          alert(\"이미 사용중이거나 사용할 수 없는 이메일 입니다.\");\n          _context13.next = 14;\n          return put({\n            type: EMAIL_CHECK_FAILURE\n          });\n\n        case 14:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 9]]);\n}\n\nfunction watchLoadEmailCheck() {\n  return _regeneratorRuntime.wrap(function watchLoadEmailCheck$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(EMAIL_CHECK_REQUEST, loadEmailCheck);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} // 아이디 중복체크 처리\n\n\nfunction loadIdCheck(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadIdCheck$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return call(IdCheckAPI, action.data);\n\n        case 2:\n          result = _context15.sent;\n\n          if (!(result === true)) {\n            _context15.next = 9;\n            break;\n          }\n\n          alert(\"사용할 수 있는 아이디 입니다.\");\n          _context15.next = 7;\n          return put({\n            type: ID_CHECK_SUCCESS,\n            data: result\n          });\n\n        case 7:\n          _context15.next = 10;\n          break;\n\n        case 9:\n          alert(\"이미 사용중이거나 사용할 수 없는 아이디 입니다.\");\n\n        case 10:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchLoadIdCheck() {\n  return _regeneratorRuntime.wrap(function watchLoadIdCheck$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(ID_CHECK_REQUEST, loadIdCheck);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction resetIdCheck() {\n  return _regeneratorRuntime.wrap(function resetIdCheck$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return put({\n            type: ID_CHECK_RESET\n          });\n\n        case 3:\n          _context17.next = 8;\n          break;\n\n        case 5:\n          _context17.prev = 5;\n          _context17.t0 = _context17[\"catch\"](0);\n          alert(\"아이디 리셋 실패\");\n\n        case 8:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 5]]);\n}\n\nfunction watchResetIdCheck() {\n  return _regeneratorRuntime.wrap(function watchResetIdCheck$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(ID_CHECK_RESET, resetIdCheck);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n} // 비밀번호 찾기 처리\n\n\nfunction loadFindPw(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadFindPw$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(ResetPasswordAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: FIND_PW_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          swal(\"비밀번호 찾기 성공\", \"이메일로 임시 비밀번호가 전송되었습니다. 로그인 후 비밀번호 변경 바랍니다.\", \"success\", {\n            timer: 1500\n          });\n          document.location.href = \"/login\";\n          _context19.next = 15;\n          break;\n\n        case 10:\n          _context19.prev = 10;\n          _context19.t0 = _context19[\"catch\"](0);\n          swal(\"비밀번호 찾기 실패\", \"이메일 또는 이름이 일치하지 않습니다.\", \"error\", {\n            timer: 2000\n          });\n          _context19.next = 15;\n          return put({\n            type: FIND_PW_FAILURE\n          });\n\n        case 15:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 10]]);\n}\n\nfunction watchLoadFindPw() {\n  return _regeneratorRuntime.wrap(function watchLoadFindPw$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(FIND_PW_REQUEST, loadFindPw);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction loadAdditionalUserInfo(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadAdditionalUserInfo$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          _context21.next = 3;\n          return call(AdditionalUserInfoAPI, action.data);\n\n        case 3:\n          result = _context21.sent;\n          _context21.next = 6;\n          return put({\n            type: USER_ADDITIONAL_INFO_SUCCESS,\n            data: result\n          });\n\n        case 6:\n          swal(\"추가 정보 등록 완료!\", \"서비스를 이용해보세요 :)\", \"success\", {\n            timer: 1500\n          });\n          _context21.next = 14;\n          break;\n\n        case 9:\n          _context21.prev = 9;\n          _context21.t0 = _context21[\"catch\"](0);\n          swal(\"추가 정보 등록 중 오류 발생\", \"error\", {\n            timer: 1500\n          });\n          _context21.next = 14;\n          return put({\n            type: USER_ADDITIONAL_INFO_FAILURE\n          });\n\n        case 14:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21, null, [[0, 9]]);\n}\n\nfunction watchLoadAdditionalUserInfo() {\n  return _regeneratorRuntime.wrap(function watchLoadAdditionalUserInfo$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(USER_ADDITIONAL_INFO_REQUEST, loadAdditionalUserInfo);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nexport default function UserSaga() {\n  return _regeneratorRuntime.wrap(function UserSaga$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return all([fork(watchKakaoLoadSignUp), fork(watchKakaoLoadLogin), fork(watchKakaoLoadIdCheck), fork(watchLoadLogin), fork(watchLoadLogout), fork(watchLoadSignUp), fork(watchLoadFindPw), fork(watchLoadEmailCheck), fork(watchLoadIdCheck), fork(watchResetIdCheck), fork(watchLoadAdditionalUserInfo)]);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}","map":{"version":3,"sources":["C:/Users/JUN-D/Desktop/헬스케어/11_2/HELF-master/front/src/store/sagas/user.js"],"names":["loadLogin","watchLoadLogin","kakaoloadLogin","watchKakaoLoadLogin","kakaoloadIdCheck","watchKakaoLoadIdCheck","loadKakaoSignUp","watchKakaoLoadSignUp","loadLogout","watchLoadLogout","loadSignUp","watchLoadSignUp","loadEmailCheck","watchLoadEmailCheck","loadIdCheck","watchLoadIdCheck","resetIdCheck","watchResetIdCheck","loadFindPw","watchLoadFindPw","loadAdditionalUserInfo","watchLoadAdditionalUserInfo","UserSaga","all","fork","put","takeLatest","call","EmailCheckAPI","LoginAPI","KaKaoIdCheckAPI","IdCheckAPI","ResetPasswordAPI","SignUpAPI","AdditionalUserInfoAPI","getUserInfoAPI","KAKAO_LOG_IN_REQUEST","KAKAO_LOG_IN_SUCCESS","KAKAO_LOG_IN_FAILURE","KAKAO_ID_CHECK_SUCCESS","KAKAO_ID_CHECK_REQUEST","KAKAO_SIGN_UP_REQUEST","KAKAO_SIGN_UP_SUCCESS","KAKAO_SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FIND_PW_REQUEST","FIND_PW_SUCCESS","FIND_PW_FAILURE","ID_CHECK_SUCCESS","ID_CHECK_REQUEST","ID_CHECK_RESET","EMAIL_CHECK_REQUEST","EMAIL_CHECK_FAILURE","EMAIL_CHECK_SUCCESS","USER_ADDITIONAL_INFO_REQUEST","USER_ADDITIONAL_INFO_SUCCESS","USER_ADDITIONAL_INFO_FAILURE","MY_PAGE_REQUEST","MY_DIET_DIARY_LIST_REQUEST","swal","action","data","result","type","sessionStorage","setItem","accessToken","buttons","timer","window","Kakao","isSignUp","Auth","getAccessToken","console","log","res","id","kakao_account","email","split","password","name","properties","nickname","temp","pw","result_info","clear","document","location","href","alert"],"mappings":"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","sourcesContent":["import { all, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport {\n  EmailCheckAPI,\n  LoginAPI,\n  KaKaoIdCheckAPI,\n  IdCheckAPI,\n  ResetPasswordAPI,\n  SignUpAPI,\n  AdditionalUserInfoAPI,\n} from \"../apis/user\";\nimport { getUserInfoAPI } from \"../apis/kakaoUser\";\nimport {\n  KAKAO_LOG_IN_REQUEST,\n  KAKAO_LOG_IN_SUCCESS,\n  KAKAO_LOG_IN_FAILURE,\n  KAKAO_ID_CHECK_SUCCESS,\n  KAKAO_ID_CHECK_REQUEST,\n  KAKAO_SIGN_UP_REQUEST,\n  KAKAO_SIGN_UP_SUCCESS,\n  KAKAO_SIGN_UP_FAILURE,\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  LOG_OUT_REQUEST,\n  LOG_OUT_SUCCESS,\n  LOG_OUT_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE,\n  FIND_PW_REQUEST,\n  FIND_PW_SUCCESS,\n  FIND_PW_FAILURE,\n  ID_CHECK_SUCCESS,\n  ID_CHECK_REQUEST,\n  ID_CHECK_RESET,\n  EMAIL_CHECK_REQUEST,\n  EMAIL_CHECK_FAILURE,\n  EMAIL_CHECK_SUCCESS,\n  USER_ADDITIONAL_INFO_REQUEST,\n  USER_ADDITIONAL_INFO_SUCCESS,\n  USER_ADDITIONAL_INFO_FAILURE,\n} from \"../modules/user\";\n\nimport { MY_PAGE_REQUEST } from \"../modules/myPage\";\nimport { MY_DIET_DIARY_LIST_REQUEST } from \"../modules/myDiet\";\nimport swal from \"sweetalert\"; // 예쁜 alert 창을 위해 사용\n// 로그인 처리\nfunction* loadLogin(action) {\n  try {\n    // 함수안에 yield 객체만 사용 가능.\n    // console.log(\"함수 요청\");\n    const result = yield call(LoginAPI, action.data); // 해당 동기 함수 호출\n    // console.log(result);\n    yield put({ type: LOG_IN_SUCCESS, data: result }); // action dispatch\n    sessionStorage.setItem(\"jwt\", result.data.accessToken); // userToken 세션스토리지 저장\n    yield put({ type: MY_PAGE_REQUEST, data: result.data.accessToken }); // mypage 정보 바로 조회\n    swal(\"로그인 성공\", \"  \", \"success\", {\n      buttons: false,\n      timer: 1800,\n    });\n  } catch (err) {\n    swal(\n      \"로그인 실패\",\n      \"아이디 또는 비밀번호가 일치하지 않거나, 이메일 인증 후 로그인 시도 바랍니다.\",\n      \"error\",\n      {\n        buttons: false,\n        timer: 2000,\n      }\n    );\n    yield put({ type: LOG_IN_FAILURE });\n  }\n}\n\nfunction* watchLoadLogin() {\n  yield takeLatest(LOG_IN_REQUEST, loadLogin);\n}\nconst { Kakao } = window;\nvar isSignUp = false;\nvar data = {};\nfunction* kakaoloadLogin(action) {\n  try {\n    // 함수안에 yield 객체만 사용 가능.\n    // console.log(\"카카오 로그인\");\n    const result = Kakao.Auth.getAccessToken();\n    console.log(result);\n    if (result !== null) {\n      const res = yield call(getUserInfoAPI); // 해당 동기 함수 호출\n      const id = res.kakao_account.email.split(\"@\");\n\n      data = {\n        id: id[0],\n        password: res.kakao_account.email,\n        name: res.properties.nickname,\n        email: res.kakao_account.email,\n      };\n\n      yield put({ type: KAKAO_ID_CHECK_REQUEST, id: id[0] }); // id check 여부\n      // console.log(data);\n    }\n  } catch (err) {\n    yield put({ type: KAKAO_LOG_IN_FAILURE });\n  }\n}\n\nfunction* watchKakaoLoadLogin() {\n  yield takeLatest(KAKAO_LOG_IN_REQUEST, kakaoloadLogin);\n}\n\n// 카카오아이디 중복체크 처리 및 각 동기 함수 호출.\nfunction* kakaoloadIdCheck(action) {\n  isSignUp = yield call(KaKaoIdCheckAPI, { id: action.id });\n  yield put({ type: KAKAO_ID_CHECK_SUCCESS, data: isSignUp });\n  if (isSignUp === true) {\n    // 중복이 없다면 해당 카카오 로그인 사용자 정보 insert\n    // console.log(\"중복이 없으니 여기로 들어옴\");\n    yield put({ type: KAKAO_SIGN_UP_REQUEST, data }); // id check 여부\n  } else if (isSignUp === false) {\n    const temp = { id: data.id, pw: data.password };\n    yield put({ type: KAKAO_SIGN_UP_FAILURE, data });\n    const result_info = yield call(LoginAPI, temp); // 해당 동기 함수 호출\n    // console.log(result_info);\n    yield put({ type: KAKAO_LOG_IN_SUCCESS, data: result_info }); // action dispatch\n    sessionStorage.setItem(\"jwt\", result_info.data.accessToken); // userToken 세션스토리지 저장\n    yield put({ type: MY_PAGE_REQUEST });\n    swal(\"카카오 로그인 성공\", \"  \", \"success\", {\n      buttons: false,\n      timer: 1800,\n    });\n  }\n}\n\nfunction* watchKakaoLoadIdCheck() {\n  yield takeLatest(KAKAO_ID_CHECK_REQUEST, kakaoloadIdCheck);\n}\n\n// 카카오 회원가입 처리 및 로그인\nfunction* loadKakaoSignUp(action) {\n  console.log(action);\n  try {\n    // console.log(\"회원가입 성공\");\n    const result = yield call(SignUpAPI, action.data);\n    yield put({ type: KAKAO_SIGN_UP_SUCCESS, data: result });\n    const temp = { id: data.id, pw: data.password };\n    const result_info = yield call(LoginAPI, temp); // 해당 동기 함수 호출\n    // console.log(result_info);\n    yield put({ type: KAKAO_LOG_IN_SUCCESS, data: result_info }); // action dispatch\n    sessionStorage.setItem(\"jwt\", result_info.data.accessToken); // userToken 세션스토리지 저장\n    yield put({ type: MY_PAGE_REQUEST, data: result.data.accessToken }); // mypage 정보 바로 조회\n\n    swal(\"카카오 로그인 성공\", \"  \", \"success\", {\n      buttons: false,\n      timer: 1800,\n    });\n  } catch (err) {\n    yield put({ type: KAKAO_SIGN_UP_FAILURE });\n  }\n}\n\nfunction* watchKakaoLoadSignUp() {\n  yield takeLatest(KAKAO_SIGN_UP_REQUEST, loadKakaoSignUp);\n}\n// 로그아웃 처리\nfunction* loadLogout(action) {\n  try {\n    // const result = yield call(LogoutAPI, action.data);\n    sessionStorage.clear(); // userToken 세션스토리지 삭제\n    document.location.href = \"/\"; // 로그아웃 처리하면 새로고침 해서 세션 사라진 걸 인식 해줘야함.\n    yield put({ type: LOG_OUT_SUCCESS });\n  } catch (err) {\n    yield put({ type: LOG_OUT_FAILURE });\n  }\n}\n\nfunction* watchLoadLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, loadLogout);\n}\n\n// 회원가입 처리\nfunction* loadSignUp(action) {\n  try {\n    const result = yield call(SignUpAPI, action.data);\n    yield put({ type: SIGN_UP_SUCCESS, data: result });\n    swal(\"회원가입 성공\", \"로그인을 진행하여 서비스를 즐겨보세요!\", \"success\");\n  } catch (err) {\n    yield put({ type: SIGN_UP_FAILURE });\n  }\n}\n\nfunction* watchLoadSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, loadSignUp);\n}\n\n// 이메일 중복체크 처리\nfunction* loadEmailCheck(action) {\n  try {\n    const result = yield call(EmailCheckAPI, action.data);\n    alert(\"사용할 수 있는 이메일 입니다.\");\n    yield put({ type: EMAIL_CHECK_SUCCESS, data: result });\n  } catch (err) {\n    alert(\"이미 사용중이거나 사용할 수 없는 이메일 입니다.\");\n    yield put({ type: EMAIL_CHECK_FAILURE });\n  }\n}\n\nfunction* watchLoadEmailCheck() {\n  yield takeLatest(EMAIL_CHECK_REQUEST, loadEmailCheck);\n}\n\n// 아이디 중복체크 처리\nfunction* loadIdCheck(action) {\n  // console.log(action);\n\n  const result = yield call(IdCheckAPI, action.data);\n  if (result === true) {\n    alert(\"사용할 수 있는 아이디 입니다.\");\n    yield put({ type: ID_CHECK_SUCCESS, data: result });\n  } else {\n    alert(\"이미 사용중이거나 사용할 수 없는 아이디 입니다.\");\n  }\n}\n\nfunction* watchLoadIdCheck() {\n  yield takeLatest(ID_CHECK_REQUEST, loadIdCheck);\n}\n\nfunction* resetIdCheck() {\n  try {\n    yield put({ type: ID_CHECK_RESET });\n  } catch (err) {\n    alert(\"아이디 리셋 실패\");\n  }\n}\n\nfunction* watchResetIdCheck() {\n  yield takeLatest(ID_CHECK_RESET, resetIdCheck);\n}\n\n// 비밀번호 찾기 처리\nfunction* loadFindPw(action) {\n  try {\n    const result = yield call(ResetPasswordAPI, action.data);\n    yield put({ type: FIND_PW_SUCCESS, data: result });\n    swal(\n      \"비밀번호 찾기 성공\",\n      \"이메일로 임시 비밀번호가 전송되었습니다. 로그인 후 비밀번호 변경 바랍니다.\",\n      \"success\",\n      {\n        timer: 1500,\n      }\n    );\n    document.location.href = \"/login\";\n  } catch (err) {\n    swal(\n      \"비밀번호 찾기 실패\",\n      \"이메일 또는 이름이 일치하지 않습니다.\",\n      \"error\",\n      {\n        timer: 2000,\n      }\n    );\n    yield put({ type: FIND_PW_FAILURE });\n  }\n}\n\nfunction* watchLoadFindPw() {\n  yield takeLatest(FIND_PW_REQUEST, loadFindPw);\n}\n\nfunction* loadAdditionalUserInfo(action) {\n  try {\n    const result = yield call(AdditionalUserInfoAPI, action.data);\n    yield put({ type: USER_ADDITIONAL_INFO_SUCCESS, data: result });\n    swal(\"추가 정보 등록 완료!\", \"서비스를 이용해보세요 :)\", \"success\", {\n      timer: 1500,\n    });\n  } catch (err) {\n    swal(\"추가 정보 등록 중 오류 발생\", \"error\", {\n      timer: 1500,\n    });\n    yield put({ type: USER_ADDITIONAL_INFO_FAILURE });\n  }\n}\n\nfunction* watchLoadAdditionalUserInfo() {\n  yield takeLatest(USER_ADDITIONAL_INFO_REQUEST, loadAdditionalUserInfo);\n}\n\nexport default function* UserSaga() {\n  yield all([\n    fork(watchKakaoLoadSignUp),\n    fork(watchKakaoLoadLogin),\n    fork(watchKakaoLoadIdCheck),\n    fork(watchLoadLogin),\n    fork(watchLoadLogout),\n    fork(watchLoadSignUp),\n    fork(watchLoadFindPw),\n    fork(watchLoadEmailCheck),\n    fork(watchLoadIdCheck),\n    fork(watchResetIdCheck),\n    fork(watchLoadAdditionalUserInfo),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}