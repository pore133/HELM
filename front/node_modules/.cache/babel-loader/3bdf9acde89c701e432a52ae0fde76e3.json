{"ast":null,"code":"/*!\n * devextreme-react\n * Version: 21.2.6\n * Build date: Tue Mar 01 2022\n *\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findValueInObject = exports.findValue = exports.buildTemplates = exports.buildNode = exports.buildConfig = exports.ValueType = void 0;\n\nvar utils_1 = require(\"./utils\");\n\nfunction buildTemplates(node, optionsAccum, templatesAccum) {\n  node.templates.forEach(function (template) {\n    if (template.isAnonymous) {\n      var templateName = utils_1.mergeNameParts(node.fullName, template.optionName);\n      optionsAccum[template.optionName] = templateName;\n      templatesAccum[templateName] = template;\n    } else {\n      templatesAccum[template.optionName] = template;\n    }\n  });\n}\n\nexports.buildTemplates = buildTemplates;\n\nfunction buildNode(node, templatesAccum, ignoreInitialValues) {\n  var result = {};\n  Object.keys(node.predefinedOptions).forEach(function (key) {\n    result[key] = node.predefinedOptions[key];\n  });\n  Object.keys(node.configs).forEach(function (key) {\n    result[key] = buildNode(node.configs[key], templatesAccum, ignoreInitialValues);\n  });\n  Object.keys(node.configCollections).forEach(function (key) {\n    result[key] = node.configCollections[key].map(function (item) {\n      return buildNode(item, templatesAccum, ignoreInitialValues);\n    });\n  });\n\n  if (!ignoreInitialValues) {\n    Object.keys(node.initialOptions).forEach(function (key) {\n      result[key] = node.initialOptions[key];\n    });\n  }\n\n  Object.keys(node.options).forEach(function (key) {\n    result[key] = node.options[key];\n  });\n  buildTemplates(node, result, templatesAccum);\n  return result;\n}\n\nexports.buildNode = buildNode;\n\nfunction buildConfig(root, ignoreInitialValues) {\n  var templatesAccum = {};\n  var options = buildNode(root, templatesAccum, ignoreInitialValues);\n  return {\n    templates: templatesAccum,\n    options: options\n  };\n}\n\nexports.buildConfig = buildConfig;\nvar ValueType;\n\n(function (ValueType) {\n  ValueType[ValueType[\"Simple\"] = 0] = \"Simple\";\n  ValueType[ValueType[\"Complex\"] = 1] = \"Complex\";\n  ValueType[ValueType[\"Array\"] = 2] = \"Array\";\n})(ValueType || (ValueType = {}));\n\nexports.ValueType = ValueType;\n\nfunction findValueInObject(obj, path) {\n  var key = path.shift();\n\n  if (!key) {\n    return {\n      value: obj,\n      type: ValueType.Simple\n    };\n  }\n\n  if (obj instanceof Object && Object.keys(obj).includes(key)) {\n    return findValueInObject(obj[key], path);\n  }\n\n  return undefined;\n}\n\nexports.findValueInObject = findValueInObject;\n\nfunction findValue(node, path) {\n  var name = path.shift();\n\n  if (!name) {\n    return {\n      value: buildConfig(node, true).options,\n      type: ValueType.Complex\n    };\n  }\n\n  var optionInfo = utils_1.parseOptionName(name);\n\n  if (optionInfo.name in node.options) {\n    var options = optionInfo.isCollectionItem ? node.options[optionInfo.name][optionInfo.index] : node.options[optionInfo.name];\n    return findValueInObject(options, path);\n  }\n\n  if (optionInfo.isCollectionItem) {\n    var collection = node.configCollections[optionInfo.name];\n\n    if (!collection) {\n      return undefined;\n    }\n\n    var item = collection[optionInfo.index];\n\n    if (!item) {\n      return undefined;\n    }\n\n    return findValue(item, path);\n  }\n\n  var child = node.configs[optionInfo.name];\n\n  if (child) {\n    return findValue(child, path);\n  }\n\n  var childCollection = node.configCollections[optionInfo.name];\n\n  if (childCollection) {\n    if (path.length !== 0) {\n      return undefined;\n    }\n\n    return {\n      value: childCollection.map(function (item) {\n        return buildNode(item, {}, true);\n      }),\n      type: ValueType.Array\n    };\n  }\n\n  return undefined;\n}\n\nexports.findValue = findValue;","map":null,"metadata":{},"sourceType":"script"}